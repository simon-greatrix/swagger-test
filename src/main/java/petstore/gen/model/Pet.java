/*
 * Pet Store Demo
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package petstore.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Pet
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-09-19T08:29:28.996147+01:00[Europe/London]")

public class Pet {

  @SerializedName("age")
  private Integer age = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets petType
   */
  @JsonAdapter(PetTypeEnum.Adapter.class)
  public enum PetTypeEnum {
    FELIS_CATUS("felis catus"),
    CANIS_LUPUS_FAMILIARIS("canis lupus familiaris"),
    CRICETINAE("cricetinae");

    private String value;

    PetTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PetTypeEnum fromValue(String text) {
      for (PetTypeEnum b : PetTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PetTypeEnum.fromValue(String.valueOf(value));
      }
    }

    public static PetTypeEnum forClass(Class<? extends Pet> cl) {
      switch( cl.getSimpleName() ) {
        case "PetCat" : return FELIS_CATUS;
        case "PetDog" : return CANIS_LUPUS_FAMILIARIS;
        case "PetHamster" : return CRICETINAE;
        default:
          throw new IllegalArgumentException("Unknown kind of pet "+cl);
      }
    }
  }  @SerializedName("petType")
  private PetTypeEnum petType = null;

  @SerializedName("weight")
  private Integer weight = null;

  public Pet() {
    this.petType = PetTypeEnum.forClass(this.getClass());
  }
  public Pet age(Integer age) {
    this.age = age;
    return this;
  }

   /**
   * Age of pet in years
   * @return age
  **/
  @Schema(description = "Age of pet in years")
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }

  public Pet id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Pet&#x27;s unique ID
   * @return id
  **/
  @Schema(required = true, description = "Pet's unique ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Pet name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of this pet
   * @return name
  **/
  @Schema(description = "Name of this pet")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Pet petType(PetTypeEnum petType) {
    this.petType = petType;
    return this;
  }

   /**
   * Get petType
   * @return petType
  **/
  @Schema(required = true, description = "")
  public PetTypeEnum getPetType() {
    return petType;
  }

  public void setPetType(PetTypeEnum petType) {
    this.petType = petType;
  }

  public Pet weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Weight of this pet in grams
   * @return weight
  **/
  @Schema(description = "Weight of this pet in grams")
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pet pet = (Pet) o;
    return Objects.equals(this.age, pet.age) &&
        Objects.equals(this.id, pet.id) &&
        Objects.equals(this.name, pet.name) &&
        Objects.equals(this.petType, pet.petType) &&
        Objects.equals(this.weight, pet.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, id, name, petType, weight);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pet {\n");
    
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    petType: ").append(toIndentedString(petType)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
